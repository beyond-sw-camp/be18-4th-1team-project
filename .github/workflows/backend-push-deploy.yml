name: backend-push-deploy.yml

on:
  push:
    branches:
#      - main
#      - feature/30-backend-cd

jobs:
  build-and-push:
    name: Build & Push image
    runs-on: ubuntu-latest

    permissions:
      write-all

    services:
      mariadb:
        image: mariadb:11.8.2
        env:
          MYSQL_DATABASE: ${{ secrets.DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MYSQL_ROOT_HOST: '%'

        ports:
          - 3306:3306
        options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make gradlew executable
        run: chmod +x ./backend/smerp/gradlew

      #컴파일(테스트 포함)
      - name: Build application
        working-directory: backend/smerp

        env:
          MYSQL_HOST: mariadb
          MYSQL_PORT: ${{ secrets.DB_PORT }}
          MYSQL_DATABASE: ${{ secrets.DATABASE }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATASOURCE_DRIVER: ${{ secrets.SPRING_DATASOURCE_DRIVER }}
          SPRING_DATASOURCE_URL: jdbc:mariadb://localhost:3306/${{ secrets.DATABASE }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
          ENCRYPT_SALT: ${{ secrets.ENCRYPT_SALT }}


        run: |
          echo "building application"
          ./gradlew build -PqueryDslVersion=${{ secrets.QUERYDSLVERSION }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          #access key, secret key
          username: ${{ secrets.BACK_DOCKER_USERNAME }}
          password: ${{ secrets.BACK_DOCKER_PASSWORD }}

      - name: Set IMAGE_TAG for later jobs
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and push docker image
        env:
          DOCKER_USERNAME: ${{ secrets.BACK_DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.BACK_DOCKER_PASSWORD }}
          IMG_NAME: ${{ secrets.BACK_IMAGE_NAME }}
          QUERYDSLVERSION: ${{ secrets.QUERYDSLVERSION }}
        run: |
          docker build \
            -f backend/smerp/Dockerfile \
            --build-arg QUERYDSLVERSION=$QUERYDSLVERSION \
            -t $DOCKER_USERNAME/$IMG_NAME:$IMAGE_TAG .
          docker push $DOCKER_USERNAME/$IMG_NAME:$IMAGE_TAG
          
          #          docker build \
          #            -f backend/smerp/Dockerfile \
          #            --build-arg QUERYDSLVERSION=$QUERYDSLVERSION \
          #            -t $DOCKER_USERNAME/$IMG_NAME:$IMAGE_TAG .
          #          docker push $DOCKER_USERNAME/$IMG_NAME:latest



  deploy:

    runs-on: self-hosted
    needs: build-and-push
    steps:
    - name: Create namespace if not exists
      env:
        DOCKER_USER: ${{ secrets.BACK_DOCKER_USERNAME }}
        IMG_NAME: ${{ secrets.BACK_IMAGE_NAME }}
        NAMESPACE: "smerp"
      shell: powershell
      run: |
        $ns = $env:NAMESPACE
        Write-Host "Checking if namespace '$ns' exists..."

        $ErrorActionPreference = "SilentlyContinue"
        $exists = kubectl get namespace $ns -o json

        if ($LASTEXITCODE -ne 0) {
          Write-Host "Namespace '$ns' not found. Creating..."
          kubectl create namespace $ns
        } else {
          Write-Host "Namespace '$ns' already exists."
        }

        # 다시 오류 감지 모드 복원
        $ErrorActionPreference = "Stop"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout kubectl context
      run: |
        echo "Checking current context"
        kubectl config current-context
        kubectl get nodes

    - name: Create k8s secret.yaml
      env:
        SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
        SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        SPRING_DATASOURCE_DRIVER: ${{ secrets.SPRING_DATASOURCE_DRIVER }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        ENCRYPT_SALT: ${{ secrets.ENCRYPT_SALT }}
        QUERYDSLVERSION: ${{ secrets.QUERYDSLVERSION }}
        MARIADB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
        MARIADB_USER: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
        MARIADB_USER_PW: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

      run: |
        kubectl create secret generic cluster-secret --from-literal=spring_datasource_url=$env:SPRING_DATASOURCE_URL --from-literal=spring_datasource_username=$env:SPRING_DATASOURCE_USERNAME --from-literal=spring_datasource_password=$env:SPRING_DATASOURCE_PASSWORD --from-literal=spring_datasource_driver=$env:SPRING_DATASOURCE_DRIVER --from-literal=server_port=$env:SERVER_PORT --from-literal=encrypt_key=$env:ENCRYPT_KEY --from-literal=encrypt_salt=$env:ENCRYPT_SALT --from-literal=querydslversion=$env:QUERYDSLVERSION --from-literal=mariadb_root_password=$env:MARIADB_ROOT_PASSWORD --dry-run=client -o yaml | kubectl apply -f - -n smerp

    - name: Apply k8s db resources
      env:
        NAMESPACE: "smerp"
      shell: powershell
      working-directory: ./backend/smerp/k8s/db
      run: |
        echo "Deploying db"
        kubectl apply -f pv.yaml -n $env:NAMESPACE 
        kubectl apply -f pvc.yaml -n $env:NAMESPACE 
        kubectl apply -f deployment.yaml -n $env:NAMESPACE
        kubectl apply -f service.yaml -n $env:NAMESPACE
        
        echo "manifests applied"

    - name: Apply k8s resources
      env:
        NAMESPACE: "smerp"
      shell: powershell
      working-directory: ./backend/smerp/k8s
      run: |
        echo "Deploying backend"
        
        kubectl apply -f deployment.yaml -n $env:NAMESPACE
        kubectl apply -f service.yaml -n $env:NAMESPACE
        
        echo "manifests applied"


    - name: Update Deployment with new image
      env:
        NAMESPACE: "smerp"
        DOCKER_USER: ${{ secrets.BACK_DOCKER_USERNAME }}
        IMG_NAME: ${{ secrets.BACK_IMAGE_NAME }}
      shell: powershell
      run: |
        $IMG_TAG = $env:GITHUB_SHA
        $FULL_IMAGE = "$env:DOCKER_USER/$env:IMG_NAME" + ":" + "$IMG_TAG"

        Write-Host "Deploying image: $FULL_IMAGE"
        
        kubectl set image deployment/backend backend=$FULL_IMAGE -n $env:NAMESPACE

    - name: Wait for rollout to complete
      env:
        NAMESPACE: "smerp"
      shell: powershell
      run: |
        kubectl rollout status deployment/backend -n $env:NAMESPACE --timeout=600s

    - name: Check running pods and services
      env:
        NAMESPACE: "smerp"
      shell: powershell
      run: |
        kubectl get pods -n $env:NAMESPACE -o wide
        kubectl get svc -n $env:NAMESPACE -o wide

